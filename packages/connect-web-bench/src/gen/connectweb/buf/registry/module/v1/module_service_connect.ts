// Copyright 2021-2024 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-connect-es v1.7.0 with parameter "ts_nocheck=false,target=ts"
// @generated from file buf/registry/module/v1/module_service.proto (package buf.registry.module.v1, syntax proto3)
/* eslint-disable */

import { CreateModulesRequest, CreateModulesResponse, DeleteModulesRequest, DeleteModulesResponse, GetModulesRequest, GetModulesResponse, ListModulesRequest, ListModulesResponse, UpdateModulesRequest, UpdateModulesResponse } from "./module_service_pb.js";
import { MethodIdempotency, MethodKind } from "@bufbuild/protobuf";

/**
 * Operate on Modules.
 *
 * @generated from service buf.registry.module.v1.ModuleService
 */
export const ModuleService = {
  typeName: "buf.registry.module.v1.ModuleService",
  methods: {
    /**
     * Get Modules by id or name.
     *
     * @generated from rpc buf.registry.module.v1.ModuleService.GetModules
     */
    getModules: {
      name: "GetModules",
      I: GetModulesRequest,
      O: GetModulesResponse,
      kind: MethodKind.Unary,
      idempotency: MethodIdempotency.NoSideEffects,
    },
    /**
     * List Modules, usually for a specific User or Organization.
     *
     * @generated from rpc buf.registry.module.v1.ModuleService.ListModules
     */
    listModules: {
      name: "ListModules",
      I: ListModulesRequest,
      O: ListModulesResponse,
      kind: MethodKind.Unary,
      idempotency: MethodIdempotency.NoSideEffects,
    },
    /**
     * Create new Modules.
     *
     * When a Module is created, a Branch representing the release Branch
     * is created as well.
     *
     * This operation is atomic. Either all Modules are created or an error is returned.
     *
     * @generated from rpc buf.registry.module.v1.ModuleService.CreateModules
     */
    createModules: {
      name: "CreateModules",
      I: CreateModulesRequest,
      O: CreateModulesResponse,
      kind: MethodKind.Unary,
      idempotency: MethodIdempotency.Idempotent,
    },
    /**
     * Update existing Modules.
     *
     * This operation is atomic. Either all Modules are updated or an error is returned.
     *
     * @generated from rpc buf.registry.module.v1.ModuleService.UpdateModules
     */
    updateModules: {
      name: "UpdateModules",
      I: UpdateModulesRequest,
      O: UpdateModulesResponse,
      kind: MethodKind.Unary,
      idempotency: MethodIdempotency.Idempotent,
    },
    /**
     * Delete existing Modules.
     *
     * This operation is atomic. Either all Modules are deleted or an error is returned.
     *
     * @generated from rpc buf.registry.module.v1.ModuleService.DeleteModules
     */
    deleteModules: {
      name: "DeleteModules",
      I: DeleteModulesRequest,
      O: DeleteModulesResponse,
      kind: MethodKind.Unary,
      idempotency: MethodIdempotency.Idempotent,
    },
  }
} as const;

